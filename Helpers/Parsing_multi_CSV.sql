--- Parsing multiple csv files with the same structure

WITH RAW AS (
SELECT  
  METADATA$FILENAME as FILENAME, 
  METADATA$FILE_ROW_NUMBER as FILE_ROW_NUMBER,
  "COMMON_UTILITY"."PUBLIC".parse_csv_TEXT($1
||NVL($2,'')
||NVL($3,'')
||NVL($4,'')
||NVL($5,'')
||NVL($6,'')
||NVL($7,'')
||NVL($8,'')
||NVL($9,'')
||NVL($10,'')
||NVL($11,'')
||NVL($12,'')
||NVL($13,'')
||NVL($14,'')
||NVL($15,'')
||NVL($16,'')
||NVL($17,'')
||NVL($18,'')
||NVL($19,'')
||NVL($20,'')
||NVL($21,'')
||NVL($22,'')
||NVL($23,'')
||NVL($24,'')
||NVL($25,'')
||NVL($26,''), ';', '"',
[ 'BOOKING_DATE', 'ISSUING_DATE', 'DISPLAYING_DATE', 'ACCOUNT_NO', 'ACCOUNT_NAME', 'STREET', 'COUNTRY_ZIP_CITY', 'ACCOUNT_INFO1', 'CONTACT', 'EMAIL', 'PHONE', 'FAX', 'SECTION', 'CONTRA_ACCOUNT', 'CONTRA_ACCOUNT_NAME', 'STREET2', 'COUNTRY_ZIP_CITY2', 'ACCOUNT_INFO2', 'CONTACT2', 'EMAIL2', 'PHONE2', 'FAX2', 'SECTION2', 'PACKAGE_ID', 'TOTAL', 'REFERENCE', 'REFERENCE_2', 'BOOKING_TYPE', 'BOOKING_NO', 'USER', 'USER_EMAIL', 'DOCUMENT_NO', 'NOTE', 'RELATION_TYPE' ]
) AS V
FROM @DATABASE.SCHEMA.STAGE_NAME (file_format =>"DATABASE"."SCHEMA".NAME_OF_THE_FILE_FORMAT)
)
SELECT 
V: BOOKING_DATE:: VARCHAR AS BOOKING_DATE,
V: ISSUING_DATE::VARCHAR AS ISSUING_DATE,
V: DISPLAYING_DATE:: VARCHAR AS DISPLAYING_DATE,
V: ACCOUNT_NO:: VARCHAR AS ACCOUNT_NO,
V: ACCOUNT_NAME:: VARCHAR AS ACCOUNT_NAME,
V: STREET:: VARCHAR AS STREET,
V: COUNTRY_ZIP_CITY:: VARCHAR AS COUNTRY_ZIP_CITY,
V: ACCOUNT_INFO1:: VARCHAR AS ACCOUNT_INFO1,
V: CONTACT:: VARCHAR AS CONTACT,
V: EMAIL:: VARCHAR AS EMAIL,
V: PHONE:: VARCHAR AS PHONE,
V: FAX:: VARCHAR AS FAX,
V: SECTION:: VARCHAR AS SECTION,
V: CONTRA_ACCOUNT:: VARCHAR AS CONTRA_ACCOUNT,
V: CONTRA_ACCOUNT_NAME:: VARCHAR AS CONTRA_ACCOUNT_NAME,
V: STREET2:: VARCHAR AS STREET2,
V: COUNTRY_ZIP_CITY2:: VARCHAR AS COUNTRY_ZIP_CITY2,
V: ACCOUNT_INFO2:: VARCHAR AS ACCOUNT_INFO2,
V: CONTACT2:: VARCHAR AS CONTACT2,
V: EMAIL2:: VARCHAR AS EMAIL2,
V: PHONE2:: VARCHAR AS PHONE2,
V: FAX2:: VARCHAR AS FAX2,
V: SECTION2:: VARCHAR AS SECTION2,
V: PACKAGE_ID:: VARCHAR AS PACKAGE_ID,
V: TOTAL:: VARCHAR AS TOTAL,
V: REFERENCE:: VARCHAR AS REFERENCE,
V: REFERENCE_2:: VARCHAR AS REFERENCE_2,
V: BOOKING_TYPE:: VARCHAR AS BOOKING_TYPE,
V: BOOKING_NO:: VARCHAR AS BOOKING_NO,
V: USER:: VARCHAR AS USER,
V: USER_EMAIL:: VARCHAR AS USER_EMAIL,
V: DOCUMENT_NO:: VARCHAR AS DOCUMENT_NO,
V: NOTE:: VARCHAR AS NOTE,
V: RELATION_TYPE:: VARCHAR AS RELATION_TYPE,
CASE
    WHEN LEFT(SUBSTRING(ACCOUNT_NAME, LENGTH(ACCOUNT_NAME) - POSITION('-', REVERSE(ACCOUNT_NAME)) + 2), 1) != ' ' THEN CONCAT(' ', SUBSTRING(ACCOUNT_NAME, LENGTH(ACCOUNT_NAME) - POSITION('-', REVERSE(ACCOUNT_NAME)) + 2))
    ELSE SUBSTRING(ACCOUNT_NAME, LENGTH(ACCOUNT_NAME) - POSITION('-', REVERSE(ACCOUNT_NAME)) + 2)
  END AS extracted_value,
RTRIM(SPLIT_PART(extracted_value, ' ', 3)) as HYP_CODE,
SITE.SITE_REGION_DOMAIN_SITE_KEY
FROM RAW 
LEFT OUTER JOIN DATABASE.SCHEMA.SITE_TABLE SITE ON 
    HYPERION_CODE = REPLACE(SITE.HYPERION, 'EUR', '')
    WHERE SITE_REGION_DOMAIN_KEY IS NULL
QUALIFY 1 = ROW_NUMBER() OVER (PARTITION BY BOOKING_NO ORDER BY BOOKING_DATE DESC)
 ;
